model="CoCAViaR_SAV_diag")
tt <- 1001
# ToDo: Error handling if fit fails?
CoQR_obj <- CoQR(data=data_tt, model=model,
SRM=SRM, beta=beta, alpha=alpha,
theta0=theta_start, optim_replications=optim_replications)
CoQR_objects <- append(CoQR_objects, list(CoQR_obj))
data_tt <- data[(tt-length_IS):(tt-1),]
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQRroll.R")
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQRroll.R")
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQRroll.R")
load_all()
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQRroll.R")
obj <- CoQRroll(data=data_test,
model="CoCAViaR_SAV_diag")
tt <- 1001
data_tt <- data[(tt-length_IS):(tt-1),]
CoQR_obj <- CoQR(data=data_tt, model=model,
SRM=SRM, beta=beta, alpha=alpha,
theta0=theta_start, optim_replications=optim_replications)
CoQR_objects <- append(CoQR_objects, list(CoQR_obj))
theta_start <- theta0
CoQR_obj <- CoQR(data=data_tt, model=model,
SRM=SRM, beta=beta, alpha=alpha,
theta0=theta_start, optim_replications=optim_replications)
CoQR_objects <- append(CoQR_objects, list(CoQR_obj))
FCs <- forecast(CoQR_obj,
newdata=data_tt %>% dplyr::select(x,y))
FCs
FC_df
length_IS
FC_df[tt-length_IS, c("m1_FC", "m2_FC")]
FC_df[tt-length_IS, c("m1_FC", "m2_FC")] <- FCs
FC_df %>% dplyr::slice(tt-length_IS)
FC_df <- FC_df %>%
dplyr::slice(tt-length_IS) %>%
dplyr::mutate(m1_FC=FCs[1], m2_FC=FCs[2])
FC_df
FC_df[tt-length_IS,] <- FC_df %>%
dplyr::slice(tt-length_IS) %>%
dplyr::mutate(m1_FC=FCs[1], m2_FC=FCs[2])
FC_df
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQRroll.R")
obj <- CoQRroll(data=data_test,
model="CoCAViaR_SAV_diag")
data_test
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQRroll.R")
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQRroll.R")
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQRroll.R")
load_all()
rm(list = c("autoplot.CoQR", "autoplot.CoQRroll", "CoQR", "CoQR.default", "CoQR.fit", "CoQRroll", "cov.CoQR", "fitted.CoQR", "forecast", "forecast.CoQR", "plot.CoQR", "plot.CoQRroll", "predict.CoQR", "print.CoQR", "print.CoQRroll", "print.summary.CoQR", "residuals.CoQR", "summary.CoQR"))
load_all()
obj <- CoQRroll(data=data_test,
model="CoCAViaR_SAV_diag")
load_all()
obj <- CoQRroll(data=data_test,
model="CoCAViaR_SAV_diag")
load_all()
obj <- CoQRroll(data=data_test,
model="CoCAViaR_SAV_diag")
obj
class(obj)
plot(obj)
load_all()
plot(obj)
obj$CoQR_objects[1]
obj$CoQR_objects[2]
data_test
as_tibbble(data_test)
as_tibble(data_test)
as_tibble(data_test) %>% as_tsibble()
class(dji30retw)
as_tsibble(dji30retw)
dji30retw %>%
tibble::rownames_to_column("Date") %>% as_tsibble()
dji30retw %>% tibble::rownames_to_column("Date")
is_tsibble(dji30retw)
load_all
load_all()
CoQR(data=dji30retw)
load_all()
document()
document()
library(CoQR)
library(CoQR)
document()
library(CoQR)
?CoQR
?CoQR::CoQR
data <- tsibble(x=x, y=y, z=z)
# (1) Simulate bivariate data (x,y) with covariate z
eps <- mvtnorm::rmvt(n=1000, sigma=matrix(c(1,0.5,0.5,1),2), df = 8)
z <- rnorm(1000)
xy <- c(1,1) + cbind(2*z, 2.5*z) + eps
data <- tsibble(x=x, y=y, z=z)
xy
data <- tsibble(x=xy[,1], y=xy[,2], z=z)
data <- tsibble(Date=1:length(z), x=xy[,1], y=xy[,2], z=z, index=Date)
data
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data
model = "joint_linear",
beta=0.95, alpha=0.95)
data <- tsibble(Date=1:length(z), x=xy[,1], y=xy[,2], z=z, index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
summary(obj)
plot(obj)
data <- tsibble(Date=1:length(z),
x=xy[,1],
y=xy[,2],
Intercept=1,
z=z,
index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
# Estimate the standard errors of the parameters
summary(obj)
plot(obj)
data
data %>% dplyr::select(-c("Date", "x", "y")) %>% as.matrix()
data %>%
tibbke::as_tibble %>%
dplyr::select(-c("Date", "x", "y")) %>%
as.matrix()
data %>%
tibble::as_tibble %>%
dplyr::select(-c("Date", "x", "y")) %>%
as.matrix()
data %>%
+     tibble::as_tibble()
data %>%
tibble::as_tibble()
data %>%
tibble::as_tibble() %>%
dplyr::select(-c("Date", "x", "y")) %>%
as.matrix()
source("~/Dropbox/Mac/Documents/Code/CoQR/R/model_functions.R")
load_all()
rm(list = c("model_CoCAViaR_10p", "model_CoCAViaR_7pVaRViolation", "model_CoCAViaR_8pCrossCoVaR", "model_CoCAViaR_AS_mixed", "model_CoCAViaR_AS_pos", "model_CoCAViaR_AS_signs", "model_CoCAViaR_SAV_diag", "model_CoCAViaR_SAV_full", "model_CoCAViaR_SAV_fullA", "model_fun", "model_joint_linear", "nabla_CoCAViaR_10p", "nabla_CoCAViaR_7pVaRViolation", "nabla_CoCAViaR_8pCrossCoVaR", "nabla_CoCAViaR_AS_mixed", "nabla_CoCAViaR_AS_pos", "nabla_CoCAViaR_AS_signs", "nabla_CoCAViaR_SAV_diag", "nabla_CoCAViaR_SAV_full", "nabla_CoCAViaR_SAV_fullA", "nabla_fun", "nabla_joint_linear", "theta_CoCAViaR_10p", "theta_CoCAViaR_7pVaRViolation", "theta_CoCAViaR_8pCrossCoVaR", "theta_CoCAViaR_AS_mixed", "theta_CoCAViaR_AS_pos", "theta_CoCAViaR_AS_signs", "theta_CoCAViaR_SAV_diag", "theta_CoCAViaR_SAV_full", "theta_CoCAViaR_SAV_fullA", "theta_fun", "theta_joint_linear"))
load_all()
data <- tsibble(Date=1:length(z),
x=xy[,1],
y=xy[,2],
Intercept=1,
z=z,
index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
# Estimate the standard errors of the parameters
summary(obj)
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/model_functions.R")
data <- tsibble(Date=1:length(z),
x=xy[,1],
y=xy[,2],
Intercept=1,
z=z,
index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
# Estimate the standard errors of the parameters
summary(obj)
theta
z
dim(z)
load_all()
data <- tsibble(Date=1:length(z),
x=xy[,1],
y=xy[,2],
Intercept=1,
z=z,
index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
# Estimate the standard errors of the parameters
summary(obj)
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
data <- tsibble(Date=1:length(z),
x=xy[,1],
y=xy[,2],
Intercept=1,
z=z,
index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
# Estimate the standard errors of the parameters
summary(obj)
data <- tsibble(Date=1:length(z),
x=xy[,1],
y=xy[,2],
Intercept=1,
z=z,
index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
# Estimate the standard errors of the parameters
summary(obj)
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
data <- tsibble(Date=1:length(z),
x=xy[,1],
y=xy[,2],
Intercept=1,
z=z,
index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
# Estimate the standard errors of the parameters
summary(obj)
obj
obj
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
theta0
data
theta0_list <- theta_fun(model=model, theta=theta0, df=data)
theta0_list
theta0_list <- theta_fun(model=model, theta=NULL, df=data)
theta0_list
theta_joint_linear
load_all()
rm(list = c("autoplot.CoQR", "CoQR", "CoQR.default", "CoQR.fit", "cov.CoQR", "fitted.CoQR", "forecast", "forecast.CoQR", "model_CoCAViaR_10p", "model_CoCAViaR_7pVaRViolation", "model_CoCAViaR_8pCrossCoVaR", "model_CoCAViaR_AS_mixed", "model_CoCAViaR_AS_pos", "model_CoCAViaR_AS_signs", "model_CoCAViaR_SAV_diag", "model_CoCAViaR_SAV_full", "model_CoCAViaR_SAV_fullA", "model_fun", "model_joint_linear", "nabla_CoCAViaR_10p", "nabla_CoCAViaR_7pVaRViolation", "nabla_CoCAViaR_8pCrossCoVaR", "nabla_CoCAViaR_AS_mixed", "nabla_CoCAViaR_AS_pos", "nabla_CoCAViaR_AS_signs", "nabla_CoCAViaR_SAV_diag", "nabla_CoCAViaR_SAV_full", "nabla_CoCAViaR_SAV_fullA", "nabla_fun", "nabla_joint_linear", "plot.CoQR", "predict.CoQR", "print.CoQR", "print.summary.CoQR", "residuals.CoQR", "summary.CoQR", "theta_CoCAViaR_10p", "theta_CoCAViaR_7pVaRViolation", "theta_CoCAViaR_8pCrossCoVaR", "theta_CoCAViaR_AS_mixed", "theta_CoCAViaR_AS_pos", "theta_CoCAViaR_AS_signs", "theta_CoCAViaR_SAV_diag", "theta_CoCAViaR_SAV_full", "theta_CoCAViaR_SAV_fullA", "theta_fun", "theta_joint_linear"))
load_all()
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
obj
summary(obj)
CoQR_object
obj$colnames
load_all()
summary(obj)
load_all()
summary(obj)
document()
library(CoQR)
library(CoQR)
data <- tsibble(Date=1:length(z),
x=xy[,1],
y=xy[,2],
Intercept=1,
z=z,
index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
summary(obj)
plot(obj)
select
document()
library(CoQR)
# Collect data as tsibble
data <- tsibble(Date=1:length(z),
x=xy[,1],
y=xy[,2],
z1=1,
z2=z,
index=Date)
# Estimate the 'joint_linear' CoQR regression model
obj <- CoQR(data=data,
model = "joint_linear",
beta=0.95, alpha=0.95)
# Estimate the standard errors of the parameters
summary(obj)
CoQR:::vcovA
class(dji30retw)
dji30retw %>% as.ts()
dji30retw %>% as.ts() %>% class()
dji30retw %>% as.ts() %>% as_tsibble()
dji30retw %>% as.ts() %>% as_tsibble(key=NULL)
dji30retw %>% as.xts() %>% as_tsibble(key=NULL)
library(xts)
dji30retw %>% as.xts() %>% as_tsibble(key=NULL)
dji30retw %>% as.xts()
dji30retw %>% as.xts() %>% as_tsibble()
dji30retw %>% as.zoo()
dji30retw %>% as.zoo() %>% as_tsibble()
load_all()
# Systemic risk example:
n <- 1000
x <- rnorm(n)
y = 0.5*x + rnorm(n),
data <- tsibble(x=x,
y=y,
VaR1 = x - 0.5,
VaR2 = x - 1,
CoVaR1 = y - 0.5,
CoVaR2 = y - 2)
# Systemic risk example:
n <- 1000
x <- rnorm(n)
y = 0.5*x + rnorm(n)
data <- tsibble(x=x,
y=y,
VaR1 = x - 0.5,
VaR2 = x - 1,
CoVaR1 = y - 0.5,
CoVaR2 = y - 2)
# Systemic risk example:
n <- 1000
x <- rnorm(n)
y = 0.5*x + rnorm(n)
data <- tsibble(Date = 1:length(x),
x=x,
y=y,
VaR1 = x - 0.5,
VaR2 = x - 1,
CoVaR1 = y - 0.5,
CoVaR2 = y - 2,
index=Date)
data
SystemicRiskFCeval(data)
data <- data %>% stats::na.omit()
LossDiffVaR <- with(data, loss_VaR(x=x, VaR=VaR1, beta=beta)) - with(data, loss_VaR(x=x, VaR=VaR2, beta=beta))
LossDiffSRM <- switch(SRM,
MES = {with(data, loss_MES(x=x, y=y, VaR=VaR1, MES=SRM1)) - with(data, loss_MES(x=x, y=y, VaR=VaR2, MES=SRM2))},
CoVaR = {with(data, loss_CoVaR(x=x, y=y, VaR=VaR1, CoVaR=SRM1, alpha=alpha)) - with(data, loss_CoVaR(x=x, y=y, VaR=VaR2, CoVaR=SRM2, alpha=alpha))}
)
LossDiff <- cbind(LossDiffVaR, LossDiffSRM)
MeanLossDiff <- colMeans(LossDiff, na.rm = T)
LossDiffVaR
source("~/Dropbox/Mac/Documents/Code/CoQR/R/SystemicRiskFCeval.R")
SystemicRiskFCeval(data)
source("~/Dropbox/Mac/Documents/Code/CoQR/R/SystemicRiskFCeval.R")
SystemicRiskFCeval(data)
data %>% rename(SRM1=!!SRM)
SRM <- "CoVaR"
data %>% rename(SRM1=!!SRM)
splice()
tsibble:::splice
tsibble:::splice()
document()
library(CoQR)
rm(list = c("autoplot.SystemicRiskFCeval", "loss_CoVaR", "loss_MES", "loss_VaR", "plot.SystemicRiskFCeval", "print.SystemicRiskFCeval", "SystemicRiskFCeval"))
document()
library(CoQR)
data_Symbols <- lapply(c("JPM", "^GSPC"), function(x) {
getSymbols(x,
from = "2000/01/01",
to = "2022/05/25",
periodicity = "daily",
auto.assign = FALSE) %>%
data.frame(Date=index(.), check.names=FALSE) %>%
tibble::as_tibble() %>%
rename_all(~stringr::str_replace_all(., paste0(x,"."), ""))
})
names(data_Symbols) <- c("JPM", "SP500")
data_Assets <- bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit()
library(quantmod)
library(dplyr)
library(CoQR)
# Get data from Yahoo Finance
data_Symbols <- lapply(c("JPM", "^GSPC"), function(x) {
getSymbols(x,
from = "2000/01/01",
to = "2022/05/25",
periodicity = "daily",
auto.assign = FALSE) %>%
data.frame(Date=index(.), check.names=FALSE) %>%
tibble::as_tibble() %>%
rename_all(~stringr::str_replace_all(., paste0(x,"."), ""))
})
names(data_Symbols) <- c("JPM", "SP500")
data_Assets <- bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit()
data_Assets
bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit() %>%
tidyr::pivot_wider(names_from=Asset)
data_Assets <- bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit() %>%
tidyr::pivot_wider(names_from=Asset)
data_Assets
bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit()
bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit()
bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit() %>%
tidyr::pivot_wider(names_from=Asset)
bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit() %>%
tidyr::pivot_wider(names_from=Asset, values_from="NegReturn")
data_Assets <- bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit() %>%
tidyr::pivot_wider(names_from=Asset, values_from="NegReturn") %>%
dplyr::rename(x=JPM, y=SP500)
# Fit a CoCAViaR model
CoCAViaR_obj <- CoQR(data=data_Assets.
z=NULL,
model="CoCAViaR_SAV_fullA",
SRM="CoVaR",
beta=0.95,
alpha=0.95)
# Fit a CoCAViaR model
CoCAViaR_obj <- CoQR(data=data_Assets,
z=NULL,
model="CoCAViaR_SAV_fullA",
SRM="CoVaR",
beta=0.95,
alpha=0.95)
# Fit a CoCAViaR model
CoCAViaR_obj <- CoQR(data=data_Assets,
model="CoCAViaR_SAV_fullA",
SRM="CoVaR",
beta=0.95,
alpha=0.95)
# Get standard errors and print its summary
summary(CoCAViaR_obj)
data_Assets <- bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit() %>%
tidyr::pivot_wider(names_from=Asset, values_from="NegReturn") %>%
dplyr::rename(x=JPM, y=SP500) %>%
tsibble::as_tsibble(index=Date)
data_Assets
CoCAViaR_obj <- CoQR(data=data_Assets,
model="CoCAViaR_SAV_fullA",
SRM="CoVaR",
beta=0.95,
alpha=0.95)
# Get standard errors and print its summary
summary(CoCAViaR_obj)
# Plot
plot(CoCAViaR_obj)
devtools::build_readme()
# Get data from Yahoo Finance
data_Symbols <- lapply(c("JPM", "^GSPC"), function(x) {
getSymbols(x,
from = "2000/01/01",
to = "2022/05/25",
periodicity = "daily",
auto.assign = FALSE) %>%
data.frame(Date=index(.), check.names=FALSE) %>%
rename_all(~stringr::str_replace_all(., paste0(x,"."), ""))
})
names(data_Symbols) <- c("JPM", "SP500")
data_Assets <- bind_rows(data_Symbols, .id = "Asset") %>%
dplyr::group_by(Asset) %>%
dplyr::mutate(Date=lubridate::as_date(Date),
NegReturn= -100*(log(Close) - log(lag(Close)))) %>%
dplyr::select(Date, Asset, NegReturn) %>%
na.omit() %>%
tidyr::pivot_wider(names_from=Asset, values_from="NegReturn") %>%
dplyr::rename(x=JPM, y=SP500) %>%
tsibble::as_tsibble(index=Date)
data_Assets
devtools::build_readme()
CoQR
data_Symbols
rename
pivot_wider
bind_rows
na.omit
