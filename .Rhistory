z <- cbind("(Intercept)"=1,
matrix(z, ncol=1, dimnames=list("z1")))
z <- cbind("(Intercept)"=1,
matrix(z, ncol=1, dimnames=list(c("z1"),NULL)))
z
z <- cbind("(Intercept)"=1,
matrix(z, ncol=1, dimnames=list(NULL,c("z1"))))
z
z <- matrix(c(1,23,3,4))
z
colnames(z)
z <- matrix(c(1,23,3,4), nrow=2)
z
colnames(z)
paste0("z", 1:(dim(z)[2]))
apply(z, 2, var)
z <- matrix(c(1,23,3,3), nrow=2)
apply(z, 2, var)
any(apply(z, 2, var))==0
(any(apply(z, 2, var)==0))
(which(apply(z, 2, var)==0))
which(apply(z, 2, var)==0)
z <- matrix(c(1,23,3,4), nrow=2)
which(apply(z, 2, var)==0)
as_tibble(z)
library(tibble)
as_tibble(z)
as_tibble(z, .name_repair="universal")
as_tibble(z, .name_repair="check_unique")
as_tibble(z, .name_repair="minimal")
as_tibble(z, .name_repair="unique")
z <- c(1,2,3)
dimnames(c)
dimnames(z)
dimnames(z) <- "asdf"
colnames(z) <- "asdf"
dimnames(z) <- list(NULL,"asdf")
z
df <- data.frame(x=x, y=y, z)
z <- matrix(rnorm(200), ncol=2)
z
df <- data.frame(x=x, y=y, z)
df
head(df)
df <- tibble(x=x, y=y, z)
tibble
df
colnames(tibble)
colnames(df)
df <- data.frame(x=x, y=y, z)
df
dim(dF)
dim(df)
df <- data.frame(x=x, y=y, z) %>% as_tibble()
df
colnames(df)
z
colnames(z) <- c("asdf1", "asdf2")
head(z)
df <- data.frame(x=x, y=y, z) %>% as_tibble()
df
colnames(df)
df %>% summarize(var())
(any(apply(z, 2, var)==0))
intercept_index <- which(apply(z, 2, var)==0)
z <- z[-intercept_index]
z
intercept_index
z <- matrix(rnorm(200), ncol=2)
# Intercept of z?
if (any(apply(z, 2, var)==0)) {
intercept_index <- which(apply(z, 2, var)==0)
z <- z[-intercept_index,]
}
z
z <- cbind("(Intercept)"=1, z)
head(z)
colnames(z)
z <- matrix(rnorm(200), ncol=2)
colnames(z)
source("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
#### Test collect_data
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
collect_data(data=NULL, x,y,z)
source("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
#### Test collect_data
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
collect_data(data=NULL, x,y,z)
source("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
#### Test collect_data
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
collect_data(data=NULL, x,y,z)
source("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
#### Test collect_data
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
collect_data(data=NULL, x,y,z)
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
#### Test collect_data
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
collect_data(data=NULL, x,y,z)
z
head(z)
cbind("(Intercept)"=1, z)
head(cbind("(Intercept)"=1, z))
colnames(z)
z <- cbind("(Intercept)"=1, z)
colnames(z)
data <- data.frame(x=x, y=y, z) %>% as_tibble()
data
# Add intercept
z <- cbind("Intercept"=1, z)
data <- data.frame(x=x, y=y, z) %>% as_tibble()
data
source("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
#### Test collect_data
x <- rnorm(100)
y <- rnorm(100)
z <- rnorm(100)
collect_data(data=NULL, x,y,z)
collect_data(data=NULL, x,y, cbind(1,"asdf"=z))
cbind(1,"asdf"=z)
colnames(cbind(1,"asdf"=z))
is.numeric(z)
is.vector(z)
dim(z)
is.atomic(logical())
is.arry(Z)
is.array(Z)
is.array(z)
z
is.matrix(z)
is.numeric(z)
(any(is.na(y)) | any(is.na(x)) | any(is.na(z)))
(!(all(is.finite(y)) & all(is.finite(x)) & all(is.finite(z))))
is.numeric(NULL)
(!is.numeric(y) | !is.numeric(x) | !is.numeric(z))
is.numeric(y)
is.numeric(NULL)
colnames(z)
z
z2 <- matrix(rnorm(200), ncol=2)
colnames(z2) <- c("", "ad")
z2
x <- rnorm(10)
y <- rnorm(10)
z <- rnorm(10)
z2 <- matrix(rnorm(20), ncol=2)
colnames(z2) <- c("", "ad")
z2
z2 <- matrix(rnorm(20), ncol=2)
colnames(z2)
colnames(z2) <- c("", "ad")
colnames(z2)
colnames(z2) %>% class()
colnames(z2) %>% length()
colnames(z2)[1]
colnames(z2)[1] %>% class()
source("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
collect_data(data=NULL, x,y,z)
collect_data(data=NULL, x,y,z2)
z2
#### Test collect_data
x <- rnorm(10)
y <- rnorm(10)
z1 <- rnorm(10)
z2 <- matrix(rnorm(20), ncol=2)
colnames(z2) <- c("", "ad")
collect_data(data=NULL, x,y,z1)
z1
collect_data(data=NULL, x,y,z2)
z2
source("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
collect_data(data=NULL, x,y,z2)
z3 <- cbind("asdf"=1, z2)
z3
collect_data(data=NULL, x,y,z3)
z3
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
collect_data(data=NULL, x,y,z3)
z
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
collect_data(data=NULL, x,y,z3)
(!is.matrix(z))
(any(apply(z, 2, var)==0))
intercept_index <- which(apply(z, 2, var)==0)
intercept_index
z <- z[,-intercept_index]
z
source("~/Dropbox/Mac/Documents/Code/CoQR/R/utils.R")
collect_data(data=NULL, x,y,z3)
source("~/Dropbox/Mac/Documents/Code/CoQR/R/model_functions.R")
CoQR(x,y,z3)
z3
CoQR(x,y,z3, model="joint_linear")
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
CoQR(x,y,z3, model="joint_linear")
x
y
z
z3
CoQR(x=x,y=y,z=z3, model="joint_linear")
data
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
CoQR(x=x,y=y,z=z3, model="joint_linear")
library(dplyr)
library(ggplot2)
library(reshape2)
library(rmgarch)
library(mvtnorm)
library(cubature)
library(lubridate)
library(doParallel)
library(xtable)
# Load CoCAViaR functions, substitute by a package later on!
source("R/CoQR.R")
source("R/SRM_est_functions.R")
source("R/CoVaR_est_functions.R")
source("R/MES_est_functions.R")
source("R/model_functions.R")
source("R/utils.R")
source("R/GARCH_utils.R")
source("R/CoVaR_cov.R")
source("R/CoQRroll.R")
source("R/SystemicDCCroll.R")
source("R/SystemicRiskFCeval.R")
CoQR(x=x,y=y,z=z3, model="joint_linear")
CoQR(x=x,y=y,z=z3, model="joint_linear") %>% summary()
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
asdf
asdf$theta
asdf$data
asdf$colnames
asdf$SRM
asdf$model
asdf$prob_level
asdf$data
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
asdf
asdf$data
#### Test collect_data
x <- rnorm(200)
y <- rnorm(200)
z1 <- rnorm(200)
z2 <- matrix(rnorm(400), ncol=2)
colnames(z2) <- c("", "ad")
z3 <- cbind("asdf"=1, z2)
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
asdf
x
y
z
z3
head(z3)
asdf$data
asdf$theta
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
data
SRM <- match.arg(SRM, c("MES","CoVaR"))
prob_level <- switch(SRM,
MES = {list(beta=beta, alpha=NA)},
CoVaR = {list(beta=beta, alpha=alpha)})
# Assign default implemented starting values if theta0==NULL
if (is.null(theta0)){
theta0_list <- theta_fun(model=model, theta=theta0, df=data)
theta0 <- theta0_list$theta_start_default
}
# Split the starting value!
theta0_list <- theta_fun(model=model, theta=theta0, df=data)
theta01 <- theta0_list$theta1
theta02 <- theta0_list$theta2
theta01
theta0
theta0_list <- theta_fun(model=model, theta=theta0, df=data)
theta0_list
theta0 <- theta0_list$theta_start_default
theta0
# Split the starting value!
theta0_list <- theta_fun(model=model, theta=theta0, df=data)
theta01 <- theta0_list$theta1
theta02 <- theta0_list$theta2
theta0_list
theta01
theta02
TT <- dim(data)[1]
# ToDo: implement some checks
models_implemented <- c("joint_linear", "CoCAViaR_6p", "CoCAViaR_8pCrossA", "CoCAViaR_8pCrossCoVaR", "CoCAViaR_9p", "CoCAViaR_10p", "CoCAViaR_7pVaRViolation", "CoCAViaR_10pSigns", "CoCAViaR_8pPos", "CoCAViaR_10pSignsAbs")
if ( !( is.list(model) | (is.character(model) & (model %in% models_implemented)) ) ){
stop("Please provide for 'model' either a list of functions or a string matching one of the pre-implemented models!")
}
SRM <- match.arg(SRM, c("MES","CoVaR"))
prob_level <- switch(SRM,
MES = {list(beta=beta, alpha=NA)},
CoVaR = {list(beta=beta, alpha=alpha)})
# Assign default implemented starting values if theta0==NULL
theta0_list <- theta_fun(model=model, theta=theta0, df=data)
if (is.null(theta0)){ theta0 <- theta0_list$theta_start_default }
# Split the starting value!
theta01 <- theta0_list$theta1
theta02 <- theta0_list$theta2
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
theta01
theta02
theta0_list <- theta_fun(model=model, theta=theta0, df=data)
theta0_list
theta0
theta0=NULL
theta0 <- theta0_list$theta_start_default
theta0
theta01 <- theta0_list$theta1
theta02 <- theta0_list$theta2
source("~/Dropbox/Mac/Documents/Code/CoQR/R/model_functions.R")
source("~/Dropbox/Mac/Documents/Code/CoQR/R/model_functions.R")
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
dim(z)
dim(theta)
theta
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
theta01
theta0_list
theta0
theta0_list
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
asdf
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
theta01
theta02
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
thetav_est
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
theta2_est
theta_est <- c(thetav_est, theta2_est)
theta_est
m_est  <- model_fun(theta_est, data, prob_level, model, SRM)
m_est
data <- data %>%
dplyr::mutate(VaR=as.numeric(m_est$m1), !!SRM:=as.numeric(m_est$m2)) %>%
dplyr::select(Date_index, Date, x, y, everything(), VaR, CoVaR) %>%
as_tibble()
data
colnames_help <- data %>%
dplyr::select(-c(Date_index, Date, x, y, VaR, CoVaR)) %>%
colnames()
colnames_help
colnames <- list(VaR=colnames_help, CoVaR=colnames_help)
colnames
theta_est
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
asdf$theta
asdf
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf
theta_info <- theta_fun(model=obj$model, theta=obj$theta, df=obj$data)
theta_info
obj$model
obj$theta
obj$data
source("~/Dropbox/Mac/Documents/Code/CoQR/R/model_functions.R")
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
source("~/Dropbox/Mac/Documents/Code/CoQR/R/model_functions.R")
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoQR.R")
asdf <- CoQR(x=x,y=y,z=z3, model="joint_linear")
asdf
summary(asdf)
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoVaR_cov.R")
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoVaR_cov.R")
summary(asdf)
debugSource("~/Dropbox/Mac/Documents/Code/CoQR/R/CoVaR_cov.R")
summary(asdf)
theta_info
TT <- dim(CoQR_object$data)[1]
theta_info <- theta_fun(model=CoQR_object$model, theta=CoQR_object$theta, df=CoQR_object$data %>% select(-c("VaR", "CoVaR")))
q1 <- theta_info$length_theta1
q2 <- theta_info$length_theta2
y <- CoQR_object$data$y
x <- CoQR_object$data$x
alpha <- CoQR_object$prob_level$alpha
beta <- CoQR_object$prob_level$beta
m <- model_fun(theta=CoQR_object$theta, df=CoQR_object$data, prob_level=CoQR_object$prob_level, model=CoQR_object$model, SRM="CoVaR")
v <- m$m1
c <- m$m2
nabla_m <- nabla_fun(theta=CoQR_object$theta, df=CoQR_object$data, prob_level=CoQR_object$prob_level, model=CoQR_object$model, SRM="CoVaR")
# Get rid of the zeros in the nablas as it is currently implemented!
nabla_v <- nabla_m$nabla_m1[,1:q1]
nabla_c <- nabla_m$nabla_m2[,(q1+1):(q1+q2)]
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoVaR_cov.R")
summary(asdf)
data.set <- readRDS(file = "application/data/data_appl_AB16.rds")
# Description of data.set:
# In the notation of Adrian and Brunnermeier (2016, Section C):
# First column of data.set:   X_t^i          = institution loss (see equation (11a) in Adrian and Brunnermeier (2016))
# Second column of data.set:  X_t^{system|i} = system loss      (see equation (11b) in Adrian and Brunnermeier (2016))
# Third column of data.set:   change in three-month yield       = item (i)   in the list of Adrian and Brunnermeier (2016, p. 1719)
# Fourth column of data.set:  change in slope of yield curve    = item (ii)  in the list of Adrian and Brunnermeier (2016, p. 1719)
# Fifth column of data.set:   short-term TED spread             = item (iii) in the list of Adrian and Brunnermeier (2016, p. 1719)
# Sixth column of data.set:   change in credit spread           = item (iv)  in the list of Adrian and Brunnermeier (2016, p. 1719)
# Seventh column of data.set: market return                     = item (v)   in the list of Adrian and Brunnermeier (2016, p. 1719)
# Eighth column of data.set:  excess real estate sector returns = item (vi)  in the list of Adrian and Brunnermeier (2016, p. 1719)
# Ninth column of data.set:   equity volatility                 = item (vii) in the list of Adrian and Brunnermeier (2016, p. 1719)
# Lag all covariates by one day
data_lagged <- data.set %>%
summarize(JPM.loss=JPM.loss,
C.loss=C.loss,
BAC.loss=BAC.loss,
SPF.loss=SPF.loss,
US3MT.ret = lag(US3MT.ret),
Spread = lag(Spread),
TEDSpread = lag(TEDSpread),
ChangeSpread = lag(ChangeSpread),
SP500.ret = lag(SP500.ret),
RV.data = lag(RV.data)) %>%
na.omit()
# Create the full covariate matrix
z_matrix <- cbind(1,data_lagged %>%
dplyr::select(US3MT.ret, Spread, TEDSpread, ChangeSpread, SP500.ret, RV.data) %>%
as.matrix())
# Co-Quantile Regression
set.seed(1)
CoQR_AB_appl <- CoQR(x=data_lagged$JPM.loss,
y=data_lagged$SPF.loss,
z=z_matrix,
model="joint_linear",
SRM="CoVaR",
beta=0.95,
alpha=0.95,
optim_replications=c(5,15))
summary(CoQR_AB_appl)
# VaR Coefficients:
#   Estimate  Std. Error t value  Pr(>|t|)
# z.z1  0.00775881  0.00216508  3.5836 0.0003418 ***
#   z.z2 -0.00012161  0.00451050 -0.0270 0.9784919
# z.z3  0.00281233  0.00062316  4.5130 6.524e-06 ***
#   z.z4  0.01920484  0.00472825  4.0617 4.939e-05 ***
#   z.z5  0.12640729  0.02154727  5.8665 4.710e-09 ***
#   z.z6  0.65437828  0.07930476  8.2514 < 2.2e-16 ***
#   z.z7  1.48859129  0.24568815  6.0589 1.462e-09 ***
#
#   CoVaR Coefficients:
#   Estimate  Std. Error t value Pr(>|t|)
# z.z1  0.01036473  0.01571600  0.6595 0.509601
# z.z2 -0.01724814  0.01355457 -1.2725 0.203251
# z.z3  0.00066487  0.00213679  0.3112 0.755697
# z.z4  0.05806606  0.01919235  3.0255 0.002494 **
#   z.z5 -0.10881681  0.20253865 -0.5373 0.591107
# z.z6  0.32239677  0.59628025  0.5407 0.588750
# z.z7  3.17817138  3.18805605  0.9969 0.318857
# ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# Notes: The first 7 parameters are the VaR parameters, and the last 7 the CoVaR ones,
# corresponding to the covariates "intercept, US3MT.ret, Spread, TEDSpread, ChangeSpread, SP500.ret, RV.data
# Create the covariate matrix without US3MT.ret and "slop of yield curve"
z_matrix2 <- cbind(1, data_lagged %>%
dplyr::select(Spread, ChangeSpread, TEDSpread, SP500.ret, RV.data) %>%
as.matrix())
# Co-Quantile Regression
set.seed(1)
CoQR_AB_appl2 <- CoQR(x=data_lagged$JPM.loss,
y=data_lagged$SPF.loss,
z=z_matrix2,
model="joint_linear",
SRM="CoVaR",
beta=0.95,
alpha=0.95,
optim_replications=c(5,15))
summary(CoQR_AB_appl2)
# VaR Coefficients:
#   Estimate  Std. Error t value  Pr(>|t|)
# z.z1 -0.00484195  0.00131408 -3.6847 0.0002312 ***
#   z.z2  0.00288181  0.00047899  6.0164 1.898e-09 ***
#   z.z3  0.09049364  0.03246201  2.7877 0.0053269 **
#   z.z4  0.01244895  0.00452705  2.7499 0.0059807 **
#   z.z5 -0.00465578  0.08377727 -0.0556 0.9556837
# z.z6  3.41263287  0.23890917 14.2842 < 2.2e-16 ***
#
#   CoVaR Coefficients:
#   Estimate Std. Error t value  Pr(>|t|)
# z.z1 -0.0103942  0.0075256 -1.3812 0.1672815
# z.z2  0.0047170  0.0020750  2.2732 0.0230501 *
#   z.z3  0.1779153  0.0535392  3.3231 0.0008961 ***
#   z.z4  0.0517978  0.0112977  4.5848 4.645e-06 ***
#   z.z5  0.3651471  0.6059859  0.6026 0.5468217
# z.z6  5.5467477  1.8200951  3.0475 0.0023184 **
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
summary(CoQR_AB_appl2, method="boot", B=100)
source("~/Dropbox/Mac/Documents/Code/CoQR/R/CoVaR_cov.R")
summary(CoQR_AB_appl2, method="boot", B=100)
